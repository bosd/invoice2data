[tool.poetry]
name = "invoice2data"
authors = ["Manuel Riel"]
description = "Python parser to extract data from pdf invoice"
version = "0.4.5"
keywords = ["python", "data-mining", "accounting", "invoice", "pdf", "parcing"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/invoice-x/invoice2data"
repository = "https://github.com/invoice-x/invoice2data"
documentation = "https://invoice2data.readthedocs.io"
classifiers = [
    "Framework :: Django",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial",
    "Topic :: Office/Business :: Financial :: Accounting",
    "Environment :: Console",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Developers",
    "Topic :: Office/Business :: Financial :: Accounting",
    "Topic :: Office/Business :: Financial",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Development Status :: 5 - Production/Stable",
]

[tool.poetry.urls]
Changelog = "https://github.com/m3nu/invoice2data/releases"

[tool.poetry.dependencies]
python = "^3.8"
click = ">=8.0.1"
dateparser ="^1.2.0"

[tool.poetry.dev-dependencies]
Pygments = ">=2.10.0"
coverage = { extras = ["toml"], version = ">=7.6" }
cffi = ">=1.17.0"
furo = ">=2021.11.12"
mypy = ">=0.930"
myst-parser = { version = ">=2.0.0" }
pre-commit = ">=2.16.0"
pre-commit-hooks = ">=4.1.0"
pydoclint = "^0.4.1"
pytest = ">=6.2.5"
ruff = ">=0.4.6"
safety = ">=2.2.3"
sphinx = ">=4.3.2"
sphinx-autobuild = ">=2021.3.14"
sphinx-click = ">=3.0.2"
typeguard = ">=2.13.3"
xdoctest = { extras = ["colors"], version = ">=0.15.10" }

[tool.poetry.group.ocr]
optional = true

[tool.poetry.group.ocr.dependencies]
ghostscript = "^0.7"

[tool.poetry.group.ocrmypdf]
optional = true

[tool.poetry.group.pyyaml.dependencies]
pyyaml = "^6.0.2"

[tool.poetry.group.pyyaml]
optional = true

[tool.poetry.group.ocrmypdf.dependencies]
ocrmypdf = [
    {version = "^14.4.0", python = ">=3.8,<3.9"},
    {version = "^15.4.4", python = ">=3.9,<3.10"},
    {version = "^16.6.1", python = ">=3.10"}
]

[tool.poetry.group.pdfminer-six]
optional = true

[tool.poetry.group.pdfminer-six.dependencies]
"pdfminer.six" = "^20231228"

[tool.poetry.group.pdfplumber]
optional = true

[tool.poetry.group.pdfplumber.dependencies]
pdfplumber = "^0.11.3"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-vs --cov invoice2data"
testpaths = [
    "tests"
]

[tool.flake8]
ignore = ["E231", "E241", "E203"]
per-file-ignores = [
    "__init__.py:F401",
]
exclude = [
    "build", "dist", ".git", ".idea", ".cache", ".tox", ".eggs"
    ]
max-line-length = 120
count = true

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38,py39,py310,py312,flake8
skip_missing_interpreters = True

[testenv]
deps = pytest >= 3.0.0, <4
commands = pytest
extras = test

[testenv:flake8]
commands=flake8 src tests
extras = test
"""

[tool.poetry.scripts]
invoice2data = "invoice2data.__main__:main"

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["invoice2data", "tests"]

[tool.coverage.report]
show_missing = true
fail_under = 100
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
]

[tool.ruff.lint.isort]
force-single-line = true
lines-after-imports = 2

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true

[tool.ruff]
src = ["src", "tests"]

[tool.ruff.lint]
extend-select = [
    "B",   # flake8-bugbear
    "C90", # mccabe
    "D",   # pydocstyle
    "E",   # pycodestyle
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "RUF", # Ruff-specific rules
    "S",   # flake8-bandit
    "UP",  # pyupgrade
    "W",   # pycodestyle
]
# ignore checks that conflict with ruff formatter (https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules)
extend-ignore = [
    "COM812",
    "COM819",
    "D107", # undocumented-public-init conflicts with DOC301
    "D206",
    "D300",
    "E111",
    "E114",
    "E117",
    "ISC001",
    "ISC002",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "W191",
]

[tool.ruff.lint.per-file-ignores]
"*/test_*.py" = ["S101"]
"noxfile.py" = ["S101"]
"**/conftest.py" = ["S101"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pydoclint]
style = 'google'
exclude = '\.git|\.nox'
arg-type-hints-in-docstring = false

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
